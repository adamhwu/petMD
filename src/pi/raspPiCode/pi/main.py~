# main.py
import asyncio
import time
from camera import get_frame
from markerDetectionPiCam import detect_marker
from motor import init, move, stop, cleanup

# PID Controller
class PIDController:
    def __init__(self, kp=0.1, ki=0.0, kd=0.01):
        self.kp = kp
        self.ki = ki
        self.kd = kd
        self.integral = 0
        self.prev_error = 0

    def calculate(self, error):
        self.integral += error
        derivative = error - self.prev_error
        self.prev_error = error
        return self.kp * error + self.ki * self.integral + self.kd * derivative

pid = PIDController(kp=0.1, ki=0.0, kd=0.02)

# Thresholds
CENTER_TOLERANCE = 60     # Pixels off-center allowed
SIZE_THRESHOLD = 140      # Marker size at which we stop approaching

async def control_loop():
    try:
        print("[üß†] Starting motion tracking loop.")
        init()

        while True:
            frame = get_frame()
            marker = detect_marker(frame)

            if marker:
                x, y, size = marker
                print(f"[üéØ] Marker at ({x}, {y}), size={size}")
                center_x = frame.shape[1] // 2
                error = x - center_x

                is_centered = abs(error) < CENTER_TOLERANCE
                is_close = size > SIZE_THRESHOLD

                if is_centered and is_close:
                    print("[üü°] Marker is close and centered ‚Äî idling.")
                    stop()
                else:
                    turn_speed = int(pid.calculate(error))
                    turn_speed = max(min(turn_speed, 30), -30)

                    base_speed = int((SIZE_THRESHOLD - size) * 0.5)
                    base_speed = max(40, min(80, base_speed))

                    left_speed = base_speed - turn_speed
                    right_speed = base_speed + turn_speed

                    print(f"[‚öôÔ∏è] Moving: L={left_speed}, R={right_speed}")
                    move(left_speed, right_speed)

            else:
                print("[üîç] No marker detected ‚Äî idling.")
                stop()

            await asyncio.sleep(0.01)

    finally:
        print("[‚ö†Ô∏è] Cleanup triggered.")
        stop()
        cleanup()

if __name__ == "__main__":
    asyncio.run(control_loop())

